// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: gRPCServer/gRPCServer.proto

package team00v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Ex00_Connect_FullMethodName = "/ex00.Ex00/Connect"
)

// Ex00Client is the client API for Ex00 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Ex00Client interface {
	Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConnectResponse, error)
}

type ex00Client struct {
	cc grpc.ClientConnInterface
}

func NewEx00Client(cc grpc.ClientConnInterface) Ex00Client {
	return &ex00Client{cc}
}

func (c *ex00Client) Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, Ex00_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Ex00Server is the server API for Ex00 service.
// All implementations must embed UnimplementedEx00Server
// for forward compatibility
type Ex00Server interface {
	Connect(context.Context, *emptypb.Empty) (*ConnectResponse, error)
	mustEmbedUnimplementedEx00Server()
}

// UnimplementedEx00Server must be embedded to have forward compatible implementations.
type UnimplementedEx00Server struct {
}

func (UnimplementedEx00Server) Connect(context.Context, *emptypb.Empty) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedEx00Server) mustEmbedUnimplementedEx00Server() {}

// UnsafeEx00Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Ex00Server will
// result in compilation errors.
type UnsafeEx00Server interface {
	mustEmbedUnimplementedEx00Server()
}

func RegisterEx00Server(s grpc.ServiceRegistrar, srv Ex00Server) {
	s.RegisterService(&Ex00_ServiceDesc, srv)
}

func _Ex00_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ex00Server).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ex00_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ex00Server).Connect(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Ex00_ServiceDesc is the grpc.ServiceDesc for Ex00 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ex00_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ex00.Ex00",
	HandlerType: (*Ex00Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Ex00_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPCServer/gRPCServer.proto",
}
