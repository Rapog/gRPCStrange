// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: gRPCServer/gRPCServer.proto

package team00v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Ex00_Connect_FullMethodName = "/ex00.Ex00/Connect"
)

// Ex00Client is the client API for Ex00 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Ex00Client interface {
	Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Ex00_ConnectClient, error)
}

type ex00Client struct {
	cc grpc.ClientConnInterface
}

func NewEx00Client(cc grpc.ClientConnInterface) Ex00Client {
	return &ex00Client{cc}
}

func (c *ex00Client) Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Ex00_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Ex00_ServiceDesc.Streams[0], Ex00_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &ex00ConnectClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ex00_ConnectClient interface {
	Recv() (*ConnectResponse, error)
	grpc.ClientStream
}

type ex00ConnectClient struct {
	grpc.ClientStream
}

func (x *ex00ConnectClient) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ex00Server is the server API for Ex00 service.
// All implementations must embed UnimplementedEx00Server
// for forward compatibility
type Ex00Server interface {
	Connect(*emptypb.Empty, Ex00_ConnectServer) error
	mustEmbedUnimplementedEx00Server()
}

// UnimplementedEx00Server must be embedded to have forward compatible implementations.
type UnimplementedEx00Server struct {
}

func (UnimplementedEx00Server) Connect(*emptypb.Empty, Ex00_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedEx00Server) mustEmbedUnimplementedEx00Server() {}

// UnsafeEx00Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Ex00Server will
// result in compilation errors.
type UnsafeEx00Server interface {
	mustEmbedUnimplementedEx00Server()
}

func RegisterEx00Server(s grpc.ServiceRegistrar, srv Ex00Server) {
	s.RegisterService(&Ex00_ServiceDesc, srv)
}

func _Ex00_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Ex00Server).Connect(m, &ex00ConnectServer{ServerStream: stream})
}

type Ex00_ConnectServer interface {
	Send(*ConnectResponse) error
	grpc.ServerStream
}

type ex00ConnectServer struct {
	grpc.ServerStream
}

func (x *ex00ConnectServer) Send(m *ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Ex00_ServiceDesc is the grpc.ServiceDesc for Ex00 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ex00_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ex00.Ex00",
	HandlerType: (*Ex00Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Ex00_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gRPCServer/gRPCServer.proto",
}
